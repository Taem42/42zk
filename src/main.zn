//!
//! The '42zk' main module.
//!

mod merkle;

use std::crypto::sha256;

type Sha256Digest = [bool; 256];

// struct PublicInput {
//   input_amount_hash: Sha256Digest,
//   output_amount_hash: Sha256Digest,
// }

// fn hash_amount(amount: u128, nonce: u128) -> Sha256Digest {
//   let amount_bits = std::convert::to_bits(amount); // [bool; 128]
//   let nonce_bits = std::convert::to_bits(nonce); // [bool; 128]
//   let mut preimage = [false; 256];

//   for i in 0 as u128..128 {
//     preimage[i] = amount_bits[i];
//     preimage[128 as u128 + i] = nonce_bits[i];
//   }

//   std::crypto::sha256(preimage)
// }

// fn main(
//   input_amount: u128,
//   input_nonce: u128,
//   output_amount: u128,
//   output_nonce: u128
// ) -> PublicInput {
//   assert!(input_amount >= output_amount);

//   let input_amount_hash = hash_amount(input_amount, input_nonce);
//   let output_amount_hash = hash_amount(output_amount, output_nonce);

//   PublicInput {
//     input_amount_hash: input_amount_hash,
//     output_amount_hash: output_amount_hash,
//   }
// }

struct PublicInput {
    root_hash: merkle::Sha256Digest, 
}


fn main(
    from: u16,
    to: u16,
    amount: u128,
    balance_list: [u128; 8],
    merkle_path: [Sha256Digest; 8]
) -> PublicInput {
    assert!(from < 8 as u16);
    assert!(to < 8 as u16);

    let accounts = merkle::generate_account(from, to, balance_list, amount);
    let merkle_leaves = merkle::generate_merkle_leaves(accounts);

    let root_hash = merkle::restore_root_hash(
      merkle_leaves,
    );

    PublicInput {
      root_hash: root_hash,
    }
}