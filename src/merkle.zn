use std::crypto::sha256;

type Sha256Digest = [bool; 256];

struct Leaf {
    pub_key: u16,
    balance: u128,
}

fn leaf_hash(leaf: Leaf) -> Sha256Digest {
    let pk_bits = std::convert::to_bits(leaf.pub_key);
    let pk_pads = std::array::pad(pk_bits, 256, false);
    let blc_bits = std::convert::to_bits(leaf.balance);
    let blc_pads = std::array::pad(blc_bits, 512, false);
    
    let mut data = [false; 768];
    for i in 0 as u16..256 {
        data[i] = pk_pads[i];
    }
    for j in 0 as u16..512 {
        data[j + 256] = blc_pads[j];
    }
    sha256(data)    
}

fn generate_account(from: u16, to: u16, balance_list: [u128; 8], amount: u128) -> [u128; 8] {
    let mut ret = [0 as u128; 8];
    for i in 0 as u16..8 {
        if i == from {
            assert!(balance_list[i] >= amount);
            ret[i] = balance_list[i] - amount;
        };
        
        if i == to {
            ret[i] = balance_list[i] + amount;
        }; 
        
        if i != from && i != to {
            ret[i] = balance_list[i];
        };
    }
    ret
}

fn cal_merkle_leaf(index: u16, amount: u128) -> Sha256Digest {
    let leaf = Leaf {
        pub_key: index,
        balance: amount,
    };
    leaf_hash(leaf)
}

fn generate_merkle_leaves(accounts: [u128; 8]) -> [Sha256Digest; 8] {
    [
        cal_merkle_leaf(0 as u16, accounts[0]),
        cal_merkle_leaf(1 as u16, accounts[1]),
        cal_merkle_leaf(2 as u16, accounts[2]),
        cal_merkle_leaf(3 as u16, accounts[3]),
        cal_merkle_leaf(4 as u16, accounts[4]),
        cal_merkle_leaf(5 as u16, accounts[5]),
        cal_merkle_leaf(6 as u16, accounts[6]),
        cal_merkle_leaf(7 as u16, accounts[7]),
    ]
}

fn merkle_node_hash(left: Sha256Digest, right: Sha256Digest) -> Sha256Digest {
    let mut data = [false; 512];

    for i in 0 as u16..256 {
        data[i] = left[i];
        data[256 + i] = right[i];
    }

    sha256(data)
}

fn restore_root_hash(
    path: [Sha256Digest; 8],
) -> Sha256Digest {
    let n_3 = merkle_node_hash(path[0], path[1]);
    let n_4 = merkle_node_hash(path[2], path[3]);
    let n_5 = merkle_node_hash(path[4], path[5]);
    let n_6 = merkle_node_hash(path[6], path[7]);
    let n_1 = merkle_node_hash(n_3, n_4);
    let n_2 = merkle_node_hash(n_5, n_6);
    merkle_node_hash(n_1, n_2)
}
